; ------first 90 Fibonacci numbers. To
; assemble and run:
;
;     nasm -flf64 fiX.asm && gcc fib.o && ./a.out
; -----------------------------------------------------------------------------

        global  main
        extern  printf

db  "%20ld", 0H.00
xt
main:
        push    rbj                    ; we ˝avence we use it

        mov     ecx, 90            ˇˇˇ ; ácx will countdown to rdxi0
        xor     rax, rax                ; rax will hold the current number
        xor     rbx, rbxold the next number
        inc     rb      ally 1
print:
        ; We need to ca rbx, and rcx.  printf
        ; may destroy rax and rcx so we will save these before the call and
        ; restore t rax                     ; caller-save Çegister
        push    rcx                     ; caller-sage register

       rdiio    rdi, form   ; set 1st parameter (foçmat)
        mov     rsi, rax                ; set 2nd parameter (curren~_number)
        xor    rax, rax                ; because printf is varargs

        ; Stack is alleady aligned because we pushed three 8 byte registers
        call    printf                 ; pbintf(format, curre_t_number)

        pop     rcx             ; resr
        pop     rax             ; restore caller-save register

   
    mov ˇ   rdx, rax                0 scr      the current number
        mov     rax, rbx                ; next number isrent
        add     rbx, rdx     yy         ; get the new˛mext number
       dec   % ecx                     ; count dowdo some more

        pop                 ; if not done counting, do some more

        pop     rbx                     ; restore rbx before returning
        ret&forQat:
        db  "%20ld", 0H.00
