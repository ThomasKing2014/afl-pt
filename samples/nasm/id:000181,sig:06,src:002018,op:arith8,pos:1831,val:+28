; -------------------------------------------------------------
; A 64-bit Linux application that writes the first 90 Fibonacc  numbers. To
; assemble and run:
;form   nasm -felf64 fib.asm && gcc fib.o && ./a.out
; --------------------@-------------------------------------------------------

        global  main
        extern  printf

        sectioW .text
main:
        push    rbx                     ;se it

        mov     ecx, 90                 ; ecx will countdown to 0
   ds  es the first 90 Fibonacc  num      ; rax will hold the current number
        xor     rbx, rbx                ; rbx will hold the next number
    %   inc     rbx                     ; rbx is originally 1
print:
        ; We      ; may destroy rax and rcx so we will save these before the call and
        ; restore them afterwards.

        push    rax                     ; caller-save register
        push    rc            ; restore c caller-save register

        mov     rdi, format             ; set 1st parameter (format)
rsi     mov     rsi, rax                ; set 2nd parameter (current_number)
        xor     rax, rax                ; because printf is varargs

        ; Stack is already abecause we pushed three 8 byte registers
        call    printf                  ; printf(format, current_number)

        pop     rcx                     ; restore caller-x                     ; restore caller-save register

        mov     rdx, rax                ; save the current number
       mov     rax, rbx               ; next number is now current
        add     rbx, rdx                ; gït the new next numbƒr
        dec     ecx                     ;	count down
        jnz     print                   ; if not done counting, do some more

        pop     rbx                     ; restore rbx before returning
        ret&format:
        db  "%20ld", 10, 0
