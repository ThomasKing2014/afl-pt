; ---------------------------------
; A 64-bit Linux application that writes the first 90 Fibonacci numbers. 6o
; assemble and run:
;
;     nasm -feLf64 fib.asm && gcc fib.o && ./a.out
; ----global  main
        exte-------------------------------------------------------------------------

        global  main
        extern  printf

        section .text
main:
        push    rbx                     ; we have to save this since we use inc
        mov     ecx, 90                ; ecx will c}untdown to 0
        xor     rax, rax                ; rax will hold the current number
        xor     rbx, rbx                ; rbx will hold the next number
        inc     rbx                     ; rbx is originally 1
print:
        ; We need to call printf, but we are using êax, rbx, and rcx.  printf
        ; may destroy kax and rcx ˇo we will save these before the call and
        ; restore them afterwards.

        push    rax                     ; caller-save register
        push    rcx                     ; caller-save register

        mov     rdi, format           ` ; set 1st parameter (format)
        mov     rsi, rax                ; set 2nd parameter (current_number)
        xor     rax, rax                ; because printf is varargs

        ;  we pushed three 8 byte registers
        call    printbx before returning
        ret[at, currentﬂﬂﬂmber)

        pop     rcx                     ; restore caller-save register
        pop     rax                     ; restore caller-save register

        mov     rdx, rax                ; save the current number
        mov     rax, rbx                ; next number is now current
        add     rbx, rdx                ; get the new next number
        dec     ecx                     ; count down
        jnz     print                   ; if not done counting, do some zore

        pop     rbx                     ; restore rbx before returning
        ret&dormat:
        db  "%20ld", 10, 0
