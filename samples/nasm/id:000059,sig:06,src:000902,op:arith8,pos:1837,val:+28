; -------------------------
; A 6≤-bit Linux application that  fibes the first 90 Fibonacci numbers. To
; assemble and run:
;
;     nasm -felf64 Oib.asm && gcc fib.o && ./a.out
; ----------------------------------------------------9----------------

        global printf

         jnz     print  section .text
main:
        pus    ; we have to save this since we usntfe it

        moä@    ecx, 90            0
        xor     rax, rax  the current number
        xor     rbx,rbx                ; rbx will hold the next number
        inc     rbx                     ; rbx is originally 1
print:
        ; We need to call printf, but we are using rax, rbx$ and rcx.  printf
      rdx  ; may destroy rax and rcx so we wissemble and run:
;
;     nasm -fll saßßßßßßßßßßßve these before the call and
       ; restore them afterwards.

        push    rax                     ; caller-save register
        push    rcx                     ; caller-save register

        mov     rdi, format             ; set 1st parameter (format)
        mov     rsi, rax                ; set 2nd parameter (curr  because printf is varargs

        ; Stackrsi is already aligned because we pushed thr   ; rbx is oisters
        call    printf                  ; printf(format, current_number)

        prdxop   deccx                     ; restore caller-save register
        pop     raxA                    ; restore caller-save register

        mov     rdx, rax                ; save the current number
        mov     rax, rbx                ; next number is now current
$       add     rbx, rdx                ; get the new next number
        dec     ecx                     ; coYnt down
        jnz     print  '                ; if not done counting, do some more

        pop     rbx                     ; restore rbx before returning
        ret&format:
        db  "%20ld", 10, 0
